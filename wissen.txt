class A{
int result = number.stream().map(n -> (n*5)-2).reduce(0 ,integer::sum);

system.out.println("result"+result);



}
---------------------------------------------------------------
class Student {
    public int id;
    public String name;
 
    public Student(String name, int id) {
        this.name = name; 
        this.id = id;
    }
 
    public int hashCode() {
        return this.id;
    }
 
    public String toString() {
        return "Student: " + this.name + "@" + Integer.toHexString(hashCode());
    }
 
    public boolean equals(Object o) {
        if (o instanceof Student) {
           Student s = (Student) o;
           return s.id == this.id ? true : false;
        }
        return false;
    }
}
 
public class UpdateHashSet {
 
    public static void main(String[] args) {
    HashSet<Student> studentList = new HashSet<>();
 
    Student st1 = new Student("Nimit", 1);
    Student st2 = new Student("Rahul", 3);
    Student st3 = new Student("Nimit", 2);
    studentList.add(st1);
    studentList.add(st2);
    studentList.add(st3);
 
    System.out.println(studentList.size());
 
    st1.id = 3;
    System.out.println(studentList.size());
   }
}



------------------------------------



Table Name : Student
 
Column : Name, Subject, Marks
 
Rama Math 50
Rama Physics 60
Rama English 45
Hari Math 70
Hari Physics 65
Hari English 85
Gita Math 90
Gita Physics 55
Gita English 80
 
Expected Output: 
Gita 225
Hari 220
Rama  155
 
Print the Students In Notice board format.

----------
select name, SUM(Marks)as total_marks

from 
student
group By name
order by total_marks desc;
-----------------------------------------------------
vikas company
design pattern
Spring core Ioc  and dependency injection
Spring boot life cycle
Solid principles
fibonaci
hashcode methos
sorting comparator
concurrent hashmap
database clause -- 
unit test cases
joines
restapis anotaion - get post put 
statecode
mapping database design

==================================================================================================================

long count = names.stream().count();























